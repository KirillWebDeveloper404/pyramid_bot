from aiogram import types
from aiogram.dispatcher.storage import FSMContext

from loader import dp
from sql import Tariff


@dp.message_handler(text='üì† –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä')
async def calculator(message: types.Message, state: FSMContext):
    await message.answer("–ö–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å?")
    await state.set_state('calculate')


@dp.message_handler(state='calculate')
async def calculate(message: types.Message, state: FSMContext):
    tariffs = Tariff.select()
    text = "–í–∞—à –¥–æ—Ö–æ–¥ —Å–æ—Å—Ç–∞–≤–∏—Ç: \n"
    for el in tariffs:
        text += f'–¢–∞—Ä–∏—Ñ {el.name}\n'
        if el.deadline != '0':
            text += f'  –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ {el.deadline} –¥–Ω–µ–π\n'
            text += f'  –í–ª–æ–∂–∏—Ç–µ {float(message.text)}\n'
            text += f'  –ü–æ–ª—É—á–∏—Ç–µ {str(float(message.text)*((1+float(el.procent)/100)**float(el.deadline))).split(".")[0]}\n\n'
        else:
            text += f'–î–µ–π—Å—Ç–≤—É–µ—Ç c {el.start_time}:00 –¥–æ {f"{int(el.start_time) + int(el.end_time)}:00 —á–∞—Å–æ–≤" if (int(el.start_time) + int(el.end_time)) <= 24 else f"{int(el.start_time) + int(el.end_time) - 24} —á–∞—Å–æ–≤ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è"}' if el.start_time != '-1' else ''
            text += f'  –í–ª–æ–∂–∏—Ç–µ {float(message.text)}\n'
            text += f'  –ü–æ–ª—É—á–∏—Ç–µ {str(float(message.text)*(1+float(el.procent)/100)).split(".")[0]}\n\n'

    await message.answer(text)
