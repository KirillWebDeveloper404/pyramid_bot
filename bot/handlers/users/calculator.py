from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.dispatcher.storage import FSMContext
import datetime

from loader import dp
from sql import User, Tariff, Invest
from keyboards.default import main_kb
from utils import send_invoice, check_pay


@dp.message_handler(text='üì† –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä')
@dp.message_handler(text='üí≤ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏')
@dp.message_handler(text='–ù–∞–∑–∞–¥', state='select_tariff')
@dp.message_handler(text='–ù–∞–∑–∞–¥', state='buy_tariff')
async def calculator(message: types.Message, state: FSMContext):
    tariffs = Tariff().select()
    tariffs_list = [el for el in tariffs]
    kb = InlineKeyboardMarkup(row_width=1)

    for el in tariffs_list:
        kb.add(InlineKeyboardButton(text=el.name, callback_data=el.id))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ. \n–ü–æ–¥—Ä–æ–±–Ω–æ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –≤—Å–µ—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ –¢–∞—Ä–∏—Ñ—ã",
                         reply_markup=kb)
    await state.set_state('select_tariff')


@dp.callback_query_handler(state='select_tariff')
async def select_tariff(c: types.CallbackQuery, state: FSMContext):
    tariff = Tariff.get(Tariff.id == int(c.data))

    await c.message.delete()
    await c.message.answer(f"–ö–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å? \n–ù–∞ —ç—Ç–æ–º —Ç–∞—Ä–∏—Ñ–µ –º–æ–∂–Ω–æ –≤–ª–æ–∂–∏—Ç—å –æ—Ç {tariff.minimum}p –¥–æ {tariff.maximum}p", reply_markup=ReplyKeyboardRemove())

    await state.set_data({'tariff': tariff})
    await state.set_state('calculate_sum')


@dp.message_handler(state='calculate_sum')
async def calculate_sum(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tariff = data['tariff']
    try:
        if int(tariff.minimum) <= int(message.text) <= int(tariff.maximum):
            data['sum'] = int(message.text)
            await state.set_data(data)
            if data['tariff'].deadline != '0':
                await message.answer("–ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å \n–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π")
                await message.answer(f"–í–Ω–∏–º–∞–Ω–∏–µ! \n–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞–º–∏ —Ç–∞—Ä–∏—Ñ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ {data['tariff'].deadline} –¥–Ω–µ–π")
                await state.set_state('select_deadline')
                await state.set_data(data)
            else:
                await calculate(message, state)
        else:
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ –æ—Ç {tariff.minimum}p –¥–æ {tariff.maximum}p")
            await message.answer("–ö–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å?")

            await state.set_data(data)
            await state.set_state('calculate_sum')
            return
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! \n–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ")
        await message.answer("–ö–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å?")

        await state.set_data(data)
        await state.set_state('calculate_sum')


@dp.message_handler(state='select_deadline')
async def calculate(message: types.Message, state: FSMContext):
    user = User.get(User.tg_id == message.from_user.id)
    data = await state.get_data()
    tariff = data['tariff']
    summ = data['sum']

    if int(message.text) < int(tariff.deadline):
        await message.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ {tariff.deadline} –¥–Ω–µ–π!")
        await message.answer("–ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å \n–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π")
        await state.set_state('select_deadline')
        await state.set_data(data)
        return
    if tariff.deadline != '0':
        percents = float(summ)*((1 + float(tariff.procent)/100)**int(message.text) - 1)
        if percents >= float(summ)*0.3:
            await message.answer(f"–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Å—Ä–æ–∫! \n–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ % –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 30% –æ—Ç —Ç–µ–ª–∞ –¥–µ–ø–æ–∑–∏—Ç–∞")
            await message.answer("–ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å \n–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π")
            await state.set_state('select_deadline')
            await state.set_data(data)
            return

    text = "–í–∞—à –¥–æ—Ö–æ–¥ —Å–æ—Å—Ç–∞–≤–∏—Ç: \n"
    text += f'–¢–∞—Ä–∏—Ñ {tariff.name}\n'
    if tariff.deadline != '0':
        text += f'–í–ª–æ–∂–∏—Ç–µ {float(summ)}p\n'
        text += f'–ü–æ–ª—É—á–∏—Ç–µ {str(float(summ)*((1+float(tariff.procent)/100)**float(message.text))).split(".")[0]}p\n'
        text += f'–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ % {str(float(summ)*((1+float(tariff.procent)/100)**float(message.text)-1)).split(".")[0]}p\n\n '
        text += f'–í–µ—Ä–Ω—ë–º —Ç–µ–ª–æ –¥–µ–ø–æ–∑–∏—Ç–∞ —á–µ—Ä–µ–∑ {int(message.text)} –¥–Ω–µ–π\n'
        text += "–¢–µ–ª–æ –¥–µ–ø–æ–∑–∏—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é —Å—Ä–æ–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
    else:
        text += f'–î–µ–π—Å—Ç–≤—É–µ—Ç c {tariff.start_time}:00 –¥–æ {f"{int(tariff.start_time) + int(tariff.end_time)}:00 —á–∞—Å–æ–≤" if (int(tariff.start_time) + int(tariff.end_time)) <= 24 else f"{int(tariff.start_time) + int(tariff.end_time) - 24}:00 —á–∞—Å–æ–≤ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è"}\n' if tariff.start_time != '-1' else ' '
        text += f'–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã {str(float(summ)*(1+float(tariff.procent)/100)).split(".")[0]}\n\n'
        text += "–¢–µ–ª–æ –¥–µ–ø–æ–∑–∏—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å % –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é —Å—Ä–æ–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"

    if tariff.deadline == '0' and \
            int(tariff.start_time)-3 <= datetime.datetime.now().hour + int(user.time_zone) < int(tariff.start_time):
        await message.answer(text, reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ', callback_data='buy_tariff')
        ))
    elif tariff.deadline != '0':
        await message.answer(text, reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ', callback_data='buy_tariff')
        ))
    else:
        text += '\n\n–¢–∞—Ä–∏—Ñ –¥–æ—Å—Ç—É–ø–µ–Ω –∫ –ø–æ–∫—É–ø–∫–µ –∑–∞ 3 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞ –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è'
        await message.answer(text)

    data['deadline'] = int(message.text)
    await state.set_data(data)
    await state.set_state('buy_tariff')


@dp.callback_query_handler(state='buy_tariff')
async def select_sum(c: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    tariff = data['tariff']
    summ = data['sum']
    deadline = data['deadline']
    user = User.get(User.tg_id == c.from_user.id)

    await c.message.delete()

    text = f'–í–∞—à –≤–∫–ª–∞–¥ {float(summ)}p\n'
    text += f'–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å {float(tariff.procent)}%\n'
    text += f'–°—Ä–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {deadline} –¥–Ω–µ–π \n' if tariff.deadline != '0' else f'–°—Ä–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {float(tariff.end_time)} —á–∞—Å–æ–≤ \n'
    if tariff.deadline != '0':
        text += f'–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã {str(float(summ)*((1+float(tariff.procent)/100)**float(deadline))).split(".")[0]}\n\n'
        text += f'  –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ % {str(float(summ)*((1+float(tariff.procent)/100)**float(deadline)-1)).split(".")[0]}p\n\n '
        text += f'  –í–µ—Ä–Ω—ë–º —Ç–µ–ª–æ –¥–µ–ø–æ–∑–∏—Ç–∞ —á–µ—Ä–µ–∑ {int(deadline)} –¥–Ω–µ–π\n'
        text += "–¢–µ–ª–æ –¥–µ–ø–æ–∑–∏—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é —Å—Ä–æ–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
    else:
        text += f'–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã {str(float(summ)*(1+float(tariff.procent)/100)).split(".")[0]}\n\n'
        text += "–¢–µ–ª–æ –¥–µ–ø–æ–∑–∏—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å % –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é —Å—Ä–æ–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"

    if float(user.balance) < float(summ):
        text += "–°–µ–π—á–∞—Å –Ω–∞ —ç–≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n"
        text += "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Åüëá"
        await c.message.answer(text, reply_markup=InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å", url=send_invoice(amount=float(summ)+5-float(user.balance),
                                                                    code=user.tg_id)),
            InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏–ª, –æ–ø–ª–∞—Ç–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data='check_and_pay')
        ))
        await state.set_data(data)
        await state.set_state('select_sum')
        return

    kb = ReplyKeyboardMarkup(
        [
            [KeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å')],
            [KeyboardButton('–ù–∞–∑–∞–¥')],
        ],
        resize_keyboard=True
    )
    text = tariff.get_info(buy=True, summ=float(summ))

    await c.message.answer(text=text, reply_markup=kb)
    await state.set_data(data)
    await state.set_state('buy_tariff')


@dp.message_handler(text='–û–ø–ª–∞—Ç–∏—Ç—å', state='buy_tariff')
async def buy_tariff(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tariff = data['tariff']
    user = User.get(User.tg_id == message.from_user.id)

    user.balance = float(user.balance) - float(data['sum'])
    if tariff.deadline != '0':
        user.balance = str(float(user.balance) + float(data['sum']) * (
                    (1 + float(tariff.procent) / 100) ** int(data['deadline']) - 1)).split(".")[0]
    user.save()

    invest = Invest()
    invest.name = tariff.name
    invest.user = user.id
    if tariff.deadline == '0':
        invest.sum = str(float(user.balance) + float(data['sum']) * (1 + float(tariff.procent) / 100)).split(".")[0]
    else:
        invest.sum = f'{data["sum"]} 0'
    if tariff.start_time == '-1':
        invest.deadline = (datetime.datetime.now() + datetime.timedelta(days=float(data['deadline']))).strftime('%d.%m.%Y')
        invest.apply_out = datetime.datetime.now().strftime('%d.%m.%Y')
    else:
        invest.deadline = (datetime.datetime.now() + datetime.timedelta(hours=float(tariff.end_time))).strftime(
            '%d.%m.%Y')
        invest.apply_out = float(tariff.start_time) + float(tariff.end_time) if (float(tariff.start_time) + float(tariff.end_time)) <= 24 else float(tariff.start_time) + float(tariff.end_time) - 24

    invest.procent = tariff.procent
    invest.save()

    await state.finish()
    await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! \n–í—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–≤–µ—Ä—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ –¥–µ–Ω—å–≥–∏, —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –º–æ–∂–Ω–æ –≤–æ –≤–∫–ª–∞–¥–∫–µ '
                         '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', reply_markup=main_kb)


@dp.callback_query_handler(text='check_and_pay', state='select_sum')
async def check_and_pay(c: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    tariff = data['tariff']
    user = User.get(User.tg_id == c.from_user.id)

    invoice = check_pay(user.tg_id)
    if invoice:
        user.balance = float(user.balance) + float(invoice.money)
        user.save()

    if float(user.balance) < float(data['sum']):
        await c.message.answer("–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", reply_markup=InlineKeyboardMarkup(
            row_width=1).add(
            InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å",
                                 url=send_invoice(amount=float(data['sum']) + 5 - float(user.balance),
                                                  code=user.tg_id)),
            InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏–ª, –æ–ø–ª–∞—Ç–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data='check_and_pay')
        ))
        await state.set_data(data)
        await state.set_state('select_sum')
        return

    user.balance = float(user.balance) - float(data['sum'])
    if tariff.deadline != '0':
        user.balance = str(float(user.balance) + float(data['sum']) * (
                    (1 + float(tariff.procent) / 100) ** int(data['deadline']) - 1)).split(".")[0]

    invest = Invest()
    invest.name = tariff.name
    invest.user = user.id
    if tariff.deadline == '0':
        invest.sum = str(float(user.balance) + float(data['sum']) * (1 + float(tariff.procent) / 100)).split(".")[0]
    else:
        invest.sum = f'{data["sum"]} 0'
    if tariff.start_time == '-1':
        invest.deadline = (datetime.datetime.now() + datetime.timedelta(days=float(data['deadline']))).strftime('%d.%m.%Y')
        invest.apply_out = datetime.datetime.now().strftime('%d.%m.%Y')
    else:
        invest.deadline = (datetime.datetime.now() + datetime.timedelta(hours=float(tariff.end_time))).strftime(
            '%d.%m.%Y')
        invest.apply_out = float(tariff.start_time) + float(tariff.end_time) if (float(tariff.start_time) + float(tariff.end_time)) <= 24 else float(tariff.start_time) + float(tariff.end_time) - 24

    invest.procent = tariff.procent
    invest.save()

    await state.finish()
    await c.message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! \n–í—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–≤–µ—Ä—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ –¥–µ–Ω—å–≥–∏, —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –º–æ–∂–Ω–æ –≤–æ –≤–∫–ª–∞–¥–∫–µ '
                         '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', reply_markup=main_kb)
