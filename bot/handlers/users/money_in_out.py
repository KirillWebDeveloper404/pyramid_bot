from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.storage import FSMContext

from loader import dp, bot
from sql import User, History, MoneyOut
from data.config import ADMINS
from keyboards.default import main_kb
from utils import send_invoice, check_pay


@dp.callback_query_handler(text='money_out')
async def money_out(c: types.CallbackQuery, state: FSMContext):
    user = User.get(User.tg_id == c.from_user.id)
    if float(user.balance) >= 100:
        await c.message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å {user.balance}p\n"
                               "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ª–∏–±–æ –∫–æ—à–µ–ª—å–∫–∞ –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏")
        await state.set_state('sum_out')
    else:
        await c.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 100—Ä")


@dp.message_handler(state='sum_out')
async def sum_out(message: types.Message, state: FSMContext):
    try:

        moneyout = MoneyOut()
        moneyout.user = message.from_user.id
        moneyout.card = message.text
        moneyout.money = user.balance
        moneyout.save()

        user = User.get(User.tg_id == message.from_user.id)
        user.balance = 0
        user.save()

        await message.answer(f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞, —Å–∫–æ—Ä–æ –º—ã –ø–µ—Ä–µ–≤–µ–¥—ë–º –≤–∞ –¥–µ–Ω—å–≥–∏.")

        await bot.send_message(
            chat_id=ADMINS[0],
            text=f'–ü–ª–∞—Ç—ë–∂ \n–°—É–º–º–∞: {float(user.balance)} \n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {user.tg_id}',
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton(text='–ó–∞—á–∏—Å–ª–∏—Ç—å', callback_data=f'accept_{user.tg_id}_{message.text}'),
                InlineKeyboardButton(text='–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'cancel_{user.tg_id}_{message.text}'),
            )
        )

    except Exception as e:
        prfloat(e)
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
        await state.set_state('sum_balance')


@dp.callback_query_handler(text='add_balance')
async def add_balance(c: types.CallbackQuery, state: FSMContext):
    user = User.get(User.tg_id == c.from_user.id)
    await c.message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å {user.balance}p\n–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å?")
    await state.set_state('sum_balance')


@dp.message_handler(state='sum_balance')
async def sum_balance(message: types.Message, state: FSMContext):
    try:
        user = User.get(User.tg_id == message.from_user.id)
        sum = float(message.text)
        invoice_link = send_invoice(amount=sum, code=str(user.tg_id))

        await message.answer(f"üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å \n\n–°—É–º–º–∞: {sum}‚ÇΩ", reply_markup=InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url=invoice_link),
            InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='check_pay')
        ))

        await state.set_state('check_pay')
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
        await state.set_state('sum_balance')


@dp.callback_query_handler(text='check_pay', state='*')
async def check_pay_handler(c: types.CallbackQuery, state: FSMContext):
    user = User.get(User.tg_id == c.from_user.id)
    invoice = check_pay(str(user.tg_id))
    if invoice:
        await c.message.delete()
        await state.finish()
        user.balance = float(user.balance) + float(invoice.money)
        user.save()
        await c.message.answer("–í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω! \n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    else:
        await c.message.answer('–ú—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–∞—à –ø–ª–∞—Ç–µ–∂. \n–í–æ–∑–º–æ–∂–Ω–æ –æ–Ω –µ—â–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å" '
                               '–µ—â—ë —Ä–∞–∑.\n'
                               '–ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')


# –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤ —Å–ø–∏—Å–∫–µ!!!
# @dp.callback_query_handler()
# async def check_pay(c: types.CallbackQuery):
#     if c.message.chat.id == ADMINS[0]:
#         if 'accept' in c.data:
#             user = User.get(User.tg_id == c.data.split('_')[1])
#             user.balance = float(user.balance) + float(c.data.split('_')[2])
#             user.save()
#
#         if user.referal != '0':
#             ref = User.get(User.tg_id == user.referal)
#             ref.balance = str(float(ref.balance) + float(c.data.split('_')[2])*(1+2.5/100)).split('.')[0]
#             ref.save()
#             if ref.referal != '0':
#                 ref1 = User.get(User.tg_id == ref.referal)
#                 ref1.balance = str(float(ref1.balance) + float(c.data.split('_')[2])*(1+1/100)).split('.')[0]
#                 ref1.save()
#
#             history = History()
#             history.user = user.tg_id
#             history.money = c.data.split('_')[2]
#             history.in_out = True
#             history.save()
#
#             await bot.send_message(
#                 chat_id=c.data.split('_')[1],
#                 text=f'–ü–ª–∞—Ç—ë–∂ –Ω–∞ —Å—É–º–º—É {c.data.split("_")[2]} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, –¥–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã  –Ω–∞ –±–∞–ª–∞–Ω—Å.'
#             )
#
#             await c.message.delete()
#
#         else:
#             await bot.send_message(
#                 chat_id=c.data.split('_')[1],
#                 text=f'–ü–ª–∞—Ç—ë–∂ –Ω–∞ —Å—É–º–º—É {c.data.split("_")[2]} –æ—Ç–∫–ª–æ–Ω—ë–Ω, –µ—Å–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
#             )
#             await c.message.delete()
# # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤ —Å–ø–∏—Å–∫–µ!!!
