from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.dispatcher.storage import FSMContext
import datetime

from loader import dp
from sql import User, Tariff, Invest
from keyboards.default import main_kb


@dp.message_handler(text='üí≤ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏')
@dp.message_handler(text='–ù–∞–∑–∞–¥', state='select_tariff')
@dp.message_handler(text='–ù–∞–∑–∞–¥', state='buy_tariff')
async def list_tariff(message: types.Message, state: FSMContext):
    tariffs = Tariff().select()
    tariffs_list = [el for el in tariffs]
    kb = InlineKeyboardMarkup(row_width=1)

    for el in tariffs_list:
        kb.add(InlineKeyboardButton(text=el.name, callback_data=el.id))

    del_kb = await message.answer('loading', reply_markup=ReplyKeyboardRemove())
    await del_kb.delete()

    await message.answer("–ù–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–≥–æ–¥–Ω–æ –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏ –ø—Ä–∏—É–º–Ω–æ–∂–∏—Ç—å –≤–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞.",
                         reply_markup=kb)
    await state.set_state('select_tariff')


@dp.callback_query_handler(state='select_tariff')
async def select_tariff(c: types.CallbackQuery, state: FSMContext):
    tariff = Tariff.get(Tariff.id == int(c.data))
    kb = ReplyKeyboardMarkup(
        [
            [KeyboardButton('–ö—É–ø–∏—Ç—å —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ')],
            [KeyboardButton('–ù–∞–∑–∞–¥')],
        ],
        resize_keyboard=True
    )
    text = tariff.get_info()

    await c.message.answer(
        text=text,
        reply_markup=kb
    )
    await state.set_data({'tariff': tariff})
    await state.set_state('select_tariff')


@dp.message_handler(text='–ö—É–ø–∏—Ç—å —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ', state='select_tariff')
async def buy_tariff(message: types.Message, state: FSMContext):
    data = await state.get_data()

    await message.answer('–ö–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–ª–æ–∂–∏—Ç—å?\n–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ', reply_markup=ReplyKeyboardRemove())
    await state.set_data(data)
    await state.set_state('select_sum')


@dp.message_handler(state='select_sum')
async def select_sum(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        data['sum'] = int(message.text)
        tariff = data['tariff']
        user = User.get(User.tg_id == message.from_user.id)

        if int(tariff.maximum) < int(message.text) < int(tariff.minimum):
            await message.answer("–í–≤—ã–¥–µ—Ç–µ —Å—É–º–º—É –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞")
            await state.set_data(data)
            await state.set_state('select_sum')
            return
        if int(user.balance) < int(message.text):
            await message.answer("–£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
            await state.set_data(data)
            await state.set_state('select_sum')
            return

        kb = ReplyKeyboardMarkup(
            [
                [KeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å')],
                [KeyboardButton('–ù–∞–∑–∞–¥')],
            ],
            resize_keyboard=True
        )
        text = tariff.get_info(buy=True, summ=int(message.text))

        await message.answer(text=text, reply_markup=kb)
        await state.set_data(data)
        await state.set_state('buy_tariff')

    except:
        await message.answer('–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ')
        await state.set_data(data)
        await state.set_state('select_sum')


@dp.message_handler(text='–û–ø–ª–∞—Ç–∏—Ç—å', state='buy_tariff')
async def buy_tariff(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tariff = data['tariff']
    user = User.get(User.tg_id == message.from_user.id)

    user.balance = int(user.balance) - data['sum']
    user.save()

    invest = Invest()
    invest.name = tariff.name
    invest.user = user.id
    invest.sum = f'{data["sum"]} 0'
    if tariff.start_time == '-1':
        invest.deadline = (datetime.datetime.now() + datetime.timedelta(days=int(tariff.end_time))).strftime('%d.%m.%Y')
        invest.apply_out = (datetime.datetime.now() + datetime.timedelta(days=int(tariff.deadline))).strftime('%d.%m.%Y')
    else:
        invest.deadline = (datetime.datetime.now() + datetime.timedelta(hours=int(tariff.end_time))).strftime(
            '%d.%m.%Y')
        invest.apply_out = int(tariff.start_time) + int(tariff.end_time) if (int(tariff.start_time) + int(tariff.end_time)) <= 24 else int(tariff.start_time) + int(tariff.end_time) - 24

    invest.procent = tariff.procent
    invest.save()

    await state.finish()
    await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! \n–í—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–≤–µ—Ä—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ –¥–µ–Ω—å–≥–∏, —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –º–æ–∂–Ω–æ –≤–æ –≤–∫–ª–∞–¥–∫–µ '
                         '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', reply_markup=main_kb)
