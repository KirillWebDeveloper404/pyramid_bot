from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, \
    ReplyKeyboardRemove
from aiogram.dispatcher.storage import FSMContext
import datetime

from loader import dp
from sql import User, Invest
from keyboards.default import main_kb


@dp.message_handler(text='üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
async def profile(message: types.Message, state: FSMContext):
    user = User.get(User.tg_id == message.from_user.id)
    text = f'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: \n\n'
    text += f'–í–∞—à ID: {message.from_user.id} \n'
    text += f'–ë–∞–ª–∞–Ω—Å: {user.balance} ‚ÇΩ'

    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(InlineKeyboardButton(text='–ú–æ–∏ —Ç–∞—Ä–∏—Ñ—ã', callback_data='tariff'))
    kb.add(InlineKeyboardButton(text='–ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data='add_balance'),
           InlineKeyboardButton(text='–í—ã–≤–µ—Å—Ç–∏', callback_data='money_out'))

    del_kb = await message.answer('loading', reply_markup=ReplyKeyboardRemove())
    await del_kb.delete()

    await message.answer(text, reply_markup=kb)


@dp.callback_query_handler(text='tariff')
async def my_tariff(c: types.CallbackQuery, state: FSMContext):
    user = User.get(User.tg_id == c.from_user.id)
    tariffs_ = Invest.select().where(Invest.user == user.id)
    tariffs = [el for el in tariffs_]

    if len(tariffs) == 0:
        await c.message.answer("–í—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞, –Ω–∞–π—Ç–∏ –∏—Ö –º–æ–∂–Ω–æ –≤–æ –≤–∫–ª–∞–¥–∫–µ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")
    else:
        await c.message.answer("–í–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã:",
                               reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]], resize_keyboard=True))
    for tariff in tariffs:
        text = tariff.get_info()
        try:
            if datetime.datetime.now() >= datetime.datetime.strptime(tariff.apply_out, '%d.%m.%Y'):
                kb = InlineKeyboardMarkup()
                kb.add(InlineKeyboardButton(text='–°–Ω—è—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã', callback_data=f'{tariff.id}'))
                await c.message.answer(text, reply_markup=kb)
            else:
                await c.message.answer(text)
        except:
            await c.message.answer(text)
    else:
        await state.set_state('percent_out')


@dp.callback_query_handler(state='percent_out')
async def percent_out(c: types.CallbackQuery, state: FSMContext):
    user = User.get(User.tg_id == c.from_user.id)
    tariff = Invest.get(Invest.id == c.data)
    percent = tariff.sum.split(' ')[1]

    tariff.sum = f'{float(tariff.sum.split(" ")[0])} 0'
    tariff.save()

    user.balance = float(user.balance) + float(percent)
    user.save()

    await c.message.answer(f"{percent}p —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.\n"
                           "–í—ã –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç -> –í—ã–≤–µ—Å—Ç–∏",
                           reply_markup=main_kb
                           )
    await state.finish()
